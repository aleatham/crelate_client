=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CrelateClient

  class ExtResumeCandidate
    attr_accessor :first_name

    attr_accessor :hometown

    attr_accessor :latest_job_title

    attr_accessor :max_salary

    attr_accessor :min_salary

    attr_accessor :modified_on

    attr_accessor :previous_job_titles

    attr_accessor :skills

    attr_accessor :source

    attr_accessor :source_name

    attr_accessor :summary

    attr_accessor :token

    attr_accessor :unlock_status

    attr_accessor :willing_to_relocate

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'first_name' => :'FirstName',
        :'hometown' => :'Hometown',
        :'latest_job_title' => :'LatestJobTitle',
        :'max_salary' => :'MaxSalary',
        :'min_salary' => :'MinSalary',
        :'modified_on' => :'ModifiedOn',
        :'previous_job_titles' => :'PreviousJobTitles',
        :'skills' => :'Skills',
        :'source' => :'Source',
        :'source_name' => :'SourceName',
        :'summary' => :'Summary',
        :'token' => :'Token',
        :'unlock_status' => :'UnlockStatus',
        :'willing_to_relocate' => :'WillingToRelocate'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'first_name' => :'String',
        :'hometown' => :'String',
        :'latest_job_title' => :'String',
        :'max_salary' => :'String',
        :'min_salary' => :'String',
        :'modified_on' => :'DateTime',
        :'previous_job_titles' => :'Array<String>',
        :'skills' => :'Array<String>',
        :'source' => :'Integer',
        :'source_name' => :'String',
        :'summary' => :'String',
        :'token' => :'String',
        :'unlock_status' => :'String',
        :'willing_to_relocate' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'FirstName')
        self.first_name = attributes[:'FirstName']
      end

      if attributes.has_key?(:'Hometown')
        self.hometown = attributes[:'Hometown']
      end

      if attributes.has_key?(:'LatestJobTitle')
        self.latest_job_title = attributes[:'LatestJobTitle']
      end

      if attributes.has_key?(:'MaxSalary')
        self.max_salary = attributes[:'MaxSalary']
      end

      if attributes.has_key?(:'MinSalary')
        self.min_salary = attributes[:'MinSalary']
      end

      if attributes.has_key?(:'ModifiedOn')
        self.modified_on = attributes[:'ModifiedOn']
      end

      if attributes.has_key?(:'PreviousJobTitles')
        if (value = attributes[:'PreviousJobTitles']).is_a?(Array)
          self.previous_job_titles = value
        end
      end

      if attributes.has_key?(:'Skills')
        if (value = attributes[:'Skills']).is_a?(Array)
          self.skills = value
        end
      end

      if attributes.has_key?(:'Source')
        self.source = attributes[:'Source']
      end

      if attributes.has_key?(:'SourceName')
        self.source_name = attributes[:'SourceName']
      end

      if attributes.has_key?(:'Summary')
        self.summary = attributes[:'Summary']
      end

      if attributes.has_key?(:'Token')
        self.token = attributes[:'Token']
      end

      if attributes.has_key?(:'UnlockStatus')
        self.unlock_status = attributes[:'UnlockStatus']
      end

      if attributes.has_key?(:'WillingToRelocate')
        self.willing_to_relocate = attributes[:'WillingToRelocate']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      source_validator = EnumAttributeValidator.new('Integer', ["1", "2"])
      return false unless source_validator.valid?(@source)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('Integer', ["1", "2"])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for 'source', must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_name == o.first_name &&
          hometown == o.hometown &&
          latest_job_title == o.latest_job_title &&
          max_salary == o.max_salary &&
          min_salary == o.min_salary &&
          modified_on == o.modified_on &&
          previous_job_titles == o.previous_job_titles &&
          skills == o.skills &&
          source == o.source &&
          source_name == o.source_name &&
          summary == o.summary &&
          token == o.token &&
          unlock_status == o.unlock_status &&
          willing_to_relocate == o.willing_to_relocate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [first_name, hometown, latest_job_title, max_salary, min_salary, modified_on, previous_job_titles, skills, source, source_name, summary, token, unlock_status, willing_to_relocate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CrelateClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
