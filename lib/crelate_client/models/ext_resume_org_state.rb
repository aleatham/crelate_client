=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CrelateClient

  class ExtResumeOrgState
    attr_accessor :career_builder_activated

    attr_accessor :career_builder_password

    attr_accessor :career_builder_username

    attr_accessor :credits

    attr_accessor :eligible

    attr_accessor :external_id

    attr_accessor :id

    attr_accessor :last_recharge_on

    attr_accessor :name

    attr_accessor :package_activated

    attr_accessor :package_id

    attr_accessor :package_status

    attr_accessor :package_status_name

    attr_accessor :recharge_behavior

    attr_accessor :recharge_behavior_name

    attr_accessor :recharge_product_id

    attr_accessor :recharge_quantity

    attr_accessor :recharge_total

    attr_accessor :remaining_credits

    attr_accessor :used_credits

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'career_builder_activated' => :'CareerBuilderActivated',
        :'career_builder_password' => :'CareerBuilderPassword',
        :'career_builder_username' => :'CareerBuilderUsername',
        :'credits' => :'Credits',
        :'eligible' => :'Eligible',
        :'external_id' => :'ExternalId',
        :'id' => :'Id',
        :'last_recharge_on' => :'LastRechargeOn',
        :'name' => :'Name',
        :'package_activated' => :'PackageActivated',
        :'package_id' => :'PackageId',
        :'package_status' => :'PackageStatus',
        :'package_status_name' => :'PackageStatusName',
        :'recharge_behavior' => :'RechargeBehavior',
        :'recharge_behavior_name' => :'RechargeBehaviorName',
        :'recharge_product_id' => :'RechargeProductId',
        :'recharge_quantity' => :'RechargeQuantity',
        :'recharge_total' => :'RechargeTotal',
        :'remaining_credits' => :'RemainingCredits',
        :'used_credits' => :'UsedCredits'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'career_builder_activated' => :'BOOLEAN',
        :'career_builder_password' => :'String',
        :'career_builder_username' => :'String',
        :'credits' => :'Integer',
        :'eligible' => :'BOOLEAN',
        :'external_id' => :'String',
        :'id' => :'String',
        :'last_recharge_on' => :'DateTime',
        :'name' => :'String',
        :'package_activated' => :'BOOLEAN',
        :'package_id' => :'String',
        :'package_status' => :'Integer',
        :'package_status_name' => :'String',
        :'recharge_behavior' => :'Integer',
        :'recharge_behavior_name' => :'String',
        :'recharge_product_id' => :'Integer',
        :'recharge_quantity' => :'Integer',
        :'recharge_total' => :'Float',
        :'remaining_credits' => :'Integer',
        :'used_credits' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'CareerBuilderActivated')
        self.career_builder_activated = attributes[:'CareerBuilderActivated']
      end

      if attributes.has_key?(:'CareerBuilderPassword')
        self.career_builder_password = attributes[:'CareerBuilderPassword']
      end

      if attributes.has_key?(:'CareerBuilderUsername')
        self.career_builder_username = attributes[:'CareerBuilderUsername']
      end

      if attributes.has_key?(:'Credits')
        self.credits = attributes[:'Credits']
      end

      if attributes.has_key?(:'Eligible')
        self.eligible = attributes[:'Eligible']
      end

      if attributes.has_key?(:'ExternalId')
        self.external_id = attributes[:'ExternalId']
      end

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'LastRechargeOn')
        self.last_recharge_on = attributes[:'LastRechargeOn']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'PackageActivated')
        self.package_activated = attributes[:'PackageActivated']
      end

      if attributes.has_key?(:'PackageId')
        self.package_id = attributes[:'PackageId']
      end

      if attributes.has_key?(:'PackageStatus')
        self.package_status = attributes[:'PackageStatus']
      end

      if attributes.has_key?(:'PackageStatusName')
        self.package_status_name = attributes[:'PackageStatusName']
      end

      if attributes.has_key?(:'RechargeBehavior')
        self.recharge_behavior = attributes[:'RechargeBehavior']
      end

      if attributes.has_key?(:'RechargeBehaviorName')
        self.recharge_behavior_name = attributes[:'RechargeBehaviorName']
      end

      if attributes.has_key?(:'RechargeProductId')
        self.recharge_product_id = attributes[:'RechargeProductId']
      end

      if attributes.has_key?(:'RechargeQuantity')
        self.recharge_quantity = attributes[:'RechargeQuantity']
      end

      if attributes.has_key?(:'RechargeTotal')
        self.recharge_total = attributes[:'RechargeTotal']
      end

      if attributes.has_key?(:'RemainingCredits')
        self.remaining_credits = attributes[:'RemainingCredits']
      end

      if attributes.has_key?(:'UsedCredits')
        self.used_credits = attributes[:'UsedCredits']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      package_status_validator = EnumAttributeValidator.new('Integer', ["1", "91", "92"])
      return false unless package_status_validator.valid?(@package_status)
      recharge_behavior_validator = EnumAttributeValidator.new('Integer', ["1", "2"])
      return false unless recharge_behavior_validator.valid?(@recharge_behavior)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_status Object to be assigned
    def package_status=(package_status)
      validator = EnumAttributeValidator.new('Integer', ["1", "91", "92"])
      unless validator.valid?(package_status)
        fail ArgumentError, "invalid value for 'package_status', must be one of #{validator.allowable_values}."
      end
      @package_status = package_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recharge_behavior Object to be assigned
    def recharge_behavior=(recharge_behavior)
      validator = EnumAttributeValidator.new('Integer', ["1", "2"])
      unless validator.valid?(recharge_behavior)
        fail ArgumentError, "invalid value for 'recharge_behavior', must be one of #{validator.allowable_values}."
      end
      @recharge_behavior = recharge_behavior
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          career_builder_activated == o.career_builder_activated &&
          career_builder_password == o.career_builder_password &&
          career_builder_username == o.career_builder_username &&
          credits == o.credits &&
          eligible == o.eligible &&
          external_id == o.external_id &&
          id == o.id &&
          last_recharge_on == o.last_recharge_on &&
          name == o.name &&
          package_activated == o.package_activated &&
          package_id == o.package_id &&
          package_status == o.package_status &&
          package_status_name == o.package_status_name &&
          recharge_behavior == o.recharge_behavior &&
          recharge_behavior_name == o.recharge_behavior_name &&
          recharge_product_id == o.recharge_product_id &&
          recharge_quantity == o.recharge_quantity &&
          recharge_total == o.recharge_total &&
          remaining_credits == o.remaining_credits &&
          used_credits == o.used_credits
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [career_builder_activated, career_builder_password, career_builder_username, credits, eligible, external_id, id, last_recharge_on, name, package_activated, package_id, package_status, package_status_name, recharge_behavior, recharge_behavior_name, recharge_product_id, recharge_quantity, recharge_total, remaining_credits, used_credits].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CrelateClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
