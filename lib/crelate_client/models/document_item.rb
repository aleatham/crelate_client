=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CrelateClient

  class DocumentItem
    attr_accessor :id

    attr_accessor :type

    attr_accessor :title

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :file_size

    attr_accessor :is_image

    attr_accessor :is_document

    attr_accessor :is_audio

    attr_accessor :content_type

    attr_accessor :entity_name

    attr_accessor :color

    attr_accessor :text_color

    attr_accessor :being_edited_by_user

    attr_accessor :additional_info


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'type' => :'Type',
        :'title' => :'Title',
        :'created_on' => :'CreatedOn',
        :'modified_on' => :'ModifiedOn',
        :'file_size' => :'FileSize',
        :'is_image' => :'IsImage',
        :'is_document' => :'IsDocument',
        :'is_audio' => :'IsAudio',
        :'content_type' => :'ContentType',
        :'entity_name' => :'EntityName',
        :'color' => :'Color',
        :'text_color' => :'TextColor',
        :'being_edited_by_user' => :'BeingEditedByUser',
        :'additional_info' => :'AdditionalInfo'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'type' => :'EntityLookup',
        :'title' => :'String',
        :'created_on' => :'DateTime',
        :'modified_on' => :'DateTime',
        :'file_size' => :'Integer',
        :'is_image' => :'BOOLEAN',
        :'is_document' => :'BOOLEAN',
        :'is_audio' => :'BOOLEAN',
        :'content_type' => :'String',
        :'entity_name' => :'String',
        :'color' => :'String',
        :'text_color' => :'String',
        :'being_edited_by_user' => :'String',
        :'additional_info' => :'Hash<String, Object>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'Type')
        self.type = attributes[:'Type']
      end

      if attributes.has_key?(:'Title')
        self.title = attributes[:'Title']
      end

      if attributes.has_key?(:'CreatedOn')
        self.created_on = attributes[:'CreatedOn']
      end

      if attributes.has_key?(:'ModifiedOn')
        self.modified_on = attributes[:'ModifiedOn']
      end

      if attributes.has_key?(:'FileSize')
        self.file_size = attributes[:'FileSize']
      end

      if attributes.has_key?(:'IsImage')
        self.is_image = attributes[:'IsImage']
      end

      if attributes.has_key?(:'IsDocument')
        self.is_document = attributes[:'IsDocument']
      end

      if attributes.has_key?(:'IsAudio')
        self.is_audio = attributes[:'IsAudio']
      end

      if attributes.has_key?(:'ContentType')
        self.content_type = attributes[:'ContentType']
      end

      if attributes.has_key?(:'EntityName')
        self.entity_name = attributes[:'EntityName']
      end

      if attributes.has_key?(:'Color')
        self.color = attributes[:'Color']
      end

      if attributes.has_key?(:'TextColor')
        self.text_color = attributes[:'TextColor']
      end

      if attributes.has_key?(:'BeingEditedByUser')
        self.being_edited_by_user = attributes[:'BeingEditedByUser']
      end

      if attributes.has_key?(:'AdditionalInfo')
        if (value = attributes[:'AdditionalInfo']).is_a?(Hash)
          self.additional_info = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          type == o.type &&
          title == o.title &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          file_size == o.file_size &&
          is_image == o.is_image &&
          is_document == o.is_document &&
          is_audio == o.is_audio &&
          content_type == o.content_type &&
          entity_name == o.entity_name &&
          color == o.color &&
          text_color == o.text_color &&
          being_edited_by_user == o.being_edited_by_user &&
          additional_info == o.additional_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, type, title, created_on, modified_on, file_size, is_image, is_document, is_audio, content_type, entity_name, color, text_color, being_edited_by_user, additional_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CrelateClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
