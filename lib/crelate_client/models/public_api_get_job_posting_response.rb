=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module CrelateClient

  class PublicApiGetJobPostingResponse
    attr_accessor :created_by_id

    attr_accessor :created_by_name

    attr_accessor :created_on

    attr_accessor :id

    attr_accessor :last_posted_on

    attr_accessor :modified_by_id

    attr_accessor :modified_by_name

    attr_accessor :primary_owner_name

    attr_accessor :modified_on

    attr_accessor :owners

    attr_accessor :city

    attr_accessor :company_name

    attr_accessor :compensation

    attr_accessor :country_id

    attr_accessor :country_name

    attr_accessor :description

    attr_accessor :external_primay_key

    attr_accessor :job_code

    attr_accessor :state

    attr_accessor :title

    attr_accessor :url_slug

    attr_accessor :zip


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_by_id' => :'CreatedBy_Id',
        :'created_by_name' => :'CreatedBy_Name',
        :'created_on' => :'CreatedOn',
        :'id' => :'Id',
        :'last_posted_on' => :'LastPostedOn',
        :'modified_by_id' => :'ModifiedBy_Id',
        :'modified_by_name' => :'ModifiedBy_Name',
        :'primary_owner_name' => :'PrimaryOwnerName',
        :'modified_on' => :'ModifiedOn',
        :'owners' => :'Owners',
        :'city' => :'City',
        :'company_name' => :'CompanyName',
        :'compensation' => :'Compensation',
        :'country_id' => :'Country_Id',
        :'country_name' => :'Country_Name',
        :'description' => :'Description',
        :'external_primay_key' => :'ExternalPrimayKey',
        :'job_code' => :'JobCode',
        :'state' => :'State',
        :'title' => :'Title',
        :'url_slug' => :'UrlSlug',
        :'zip' => :'Zip'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created_by_id' => :'String',
        :'created_by_name' => :'String',
        :'created_on' => :'DateTime',
        :'id' => :'String',
        :'last_posted_on' => :'DateTime',
        :'modified_by_id' => :'String',
        :'modified_by_name' => :'String',
        :'primary_owner_name' => :'String',
        :'modified_on' => :'DateTime',
        :'owners' => :'Array<PublicApiRecordOwner>',
        :'city' => :'String',
        :'company_name' => :'String',
        :'compensation' => :'String',
        :'country_id' => :'String',
        :'country_name' => :'String',
        :'description' => :'String',
        :'external_primay_key' => :'String',
        :'job_code' => :'String',
        :'state' => :'String',
        :'title' => :'String',
        :'url_slug' => :'String',
        :'zip' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'CreatedBy_Id')
        self.created_by_id = attributes[:'CreatedBy_Id']
      end

      if attributes.has_key?(:'CreatedBy_Name')
        self.created_by_name = attributes[:'CreatedBy_Name']
      end

      if attributes.has_key?(:'CreatedOn')
        self.created_on = attributes[:'CreatedOn']
      end

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'LastPostedOn')
        self.last_posted_on = attributes[:'LastPostedOn']
      end

      if attributes.has_key?(:'ModifiedBy_Id')
        self.modified_by_id = attributes[:'ModifiedBy_Id']
      end

      if attributes.has_key?(:'ModifiedBy_Name')
        self.modified_by_name = attributes[:'ModifiedBy_Name']
      end

      if attributes.has_key?(:'PrimaryOwnerName')
        self.primary_owner_name = attributes[:'PrimaryOwnerName']
      end

      if attributes.has_key?(:'ModifiedOn')
        self.modified_on = attributes[:'ModifiedOn']
      end

      if attributes.has_key?(:'Owners')
        if (value = attributes[:'Owners']).is_a?(Array)
          self.owners = value
        end
      end

      if attributes.has_key?(:'City')
        self.city = attributes[:'City']
      end

      if attributes.has_key?(:'CompanyName')
        self.company_name = attributes[:'CompanyName']
      end

      if attributes.has_key?(:'Compensation')
        self.compensation = attributes[:'Compensation']
      end

      if attributes.has_key?(:'Country_Id')
        self.country_id = attributes[:'Country_Id']
      end

      if attributes.has_key?(:'Country_Name')
        self.country_name = attributes[:'Country_Name']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'ExternalPrimayKey')
        self.external_primay_key = attributes[:'ExternalPrimayKey']
      end

      if attributes.has_key?(:'JobCode')
        self.job_code = attributes[:'JobCode']
      end

      if attributes.has_key?(:'State')
        self.state = attributes[:'State']
      end

      if attributes.has_key?(:'Title')
        self.title = attributes[:'Title']
      end

      if attributes.has_key?(:'UrlSlug')
        self.url_slug = attributes[:'UrlSlug']
      end

      if attributes.has_key?(:'Zip')
        self.zip = attributes[:'Zip']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_by_id == o.created_by_id &&
          created_by_name == o.created_by_name &&
          created_on == o.created_on &&
          id == o.id &&
          last_posted_on == o.last_posted_on &&
          modified_by_id == o.modified_by_id &&
          modified_by_name == o.modified_by_name &&
          primary_owner_name == o.primary_owner_name &&
          modified_on == o.modified_on &&
          owners == o.owners &&
          city == o.city &&
          company_name == o.company_name &&
          compensation == o.compensation &&
          country_id == o.country_id &&
          country_name == o.country_name &&
          description == o.description &&
          external_primay_key == o.external_primay_key &&
          job_code == o.job_code &&
          state == o.state &&
          title == o.title &&
          url_slug == o.url_slug &&
          zip == o.zip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created_by_id, created_by_name, created_on, id, last_posted_on, modified_by_id, modified_by_name, primary_owner_name, modified_on, owners, city, company_name, compensation, country_id, country_name, description, external_primay_key, job_code, state, title, url_slug, zip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CrelateClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
