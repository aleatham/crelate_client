=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CrelateClient
  class JobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # delete a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_with_http_info(job_id, api_key, opts)
      return data
    end

    # delete a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_delete_job ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_delete_job"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_delete_job"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_delete_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete an attachment for a job
    # 
    # @param job_id job identifier
    # @param attachment_id attachment identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job_attachment(job_id, attachment_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_attachment_with_http_info(job_id, attachment_id, api_key, opts)
      return data
    end

    # delete an attachment for a job
    # 
    # @param job_id job identifier
    # @param attachment_id attachment identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_attachment_with_http_info(job_id, attachment_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_delete_job_attachment ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_delete_job_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling JobsApi.public_api_delete_job_attachment"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_delete_job_attachment"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/attachments/{attachmentId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_delete_job_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a contact from a job for the recruiting workflow
    # 
    # @param job_id 
    # @param contact_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job_contact(job_id, contact_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_contact_with_http_info(job_id, contact_id, api_key, opts)
      return data
    end

    # delete a contact from a job for the recruiting workflow
    # 
    # @param job_id 
    # @param contact_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_contact_with_http_info(job_id, contact_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_delete_job_contact ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_delete_job_contact"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling JobsApi.public_api_delete_job_contact"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_delete_job_contact"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/contacts/{contactId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_delete_job_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a note for a job
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job_note(job_id, note_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_note_with_http_info(job_id, note_id, api_key, opts)
      return data
    end

    # delete a note for a job
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_note_with_http_info(job_id, note_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_delete_job_note ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_delete_job_note"
      end
      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling JobsApi.public_api_delete_job_note"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_delete_job_note"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/notes/{noteId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'noteId' + '}', note_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_delete_job_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job_task(job_id, task_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_task_with_http_info(job_id, task_id, api_key, opts)
      return data
    end

    # delete a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_task_with_http_info(job_id, task_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_delete_job_task ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_delete_job_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling JobsApi.public_api_delete_job_task"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_delete_job_task"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/tasks/{taskId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'taskId' + '}', task_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_delete_job_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [PublicApiGetJobResponse]
    def public_api_get_job(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_with_http_info(job_id, api_key, opts)
      return data
    end

    # retrieve a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiGetJobResponse, Fixnum, Hash)>] PublicApiGetJobResponse data, response status code and response headers
    def public_api_get_job_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get content for a specific attachment for a job
    # 
    # @param job_id identifier
    # @param attachment_id attachment identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_get_job_attachment(job_id, attachment_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_attachment_with_http_info(job_id, attachment_id, api_key, opts)
      return data
    end

    # get content for a specific attachment for a job
    # 
    # @param job_id identifier
    # @param attachment_id attachment identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_get_job_attachment_with_http_info(job_id, attachment_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_attachment ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_attachment"
      end
      # verify the required parameter 'attachment_id' is set
      if @api_client.config.client_side_validation && attachment_id.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_id' when calling JobsApi.public_api_get_job_attachment"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_attachment"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/attachments/{attachmentId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get all attachment metadata for a company
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [PublicApiAttachmentResponseList]
    def public_api_get_job_attachments(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_attachments_with_http_info(job_id, api_key, opts)
      return data
    end

    # get all attachment metadata for a company
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiAttachmentResponseList, Fixnum, Hash)>] PublicApiAttachmentResponseList data, response status code and response headers
    def public_api_get_job_attachments_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_attachments ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_attachments"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_attachments"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/attachments".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiAttachmentResponseList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get contacts associated with job
    # 
    # @param job_id contact identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicApiGetJobContact>]
    def public_api_get_job_contacts(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_contacts_with_http_info(job_id, api_key, opts)
      return data
    end

    # get contacts associated with job
    # 
    # @param job_id contact identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicApiGetJobContact>, Fixnum, Hash)>] Array<PublicApiGetJobContact> data, response status code and response headers
    def public_api_get_job_contacts_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_contacts ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_contacts"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_contacts"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/contacts".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicApiGetJobContact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get a note for a contact
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [PublicApiGetNoteResponse]
    def public_api_get_job_note(job_id, note_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_note_with_http_info(job_id, note_id, api_key, opts)
      return data
    end

    # get a note for a contact
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiGetNoteResponse, Fixnum, Hash)>] PublicApiGetNoteResponse data, response status code and response headers
    def public_api_get_job_note_with_http_info(job_id, note_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_note ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_note"
      end
      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling JobsApi.public_api_get_job_note"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_note"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/notes/{noteId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'noteId' + '}', note_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetNoteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get placements associated with a job  Please Note: TimeToFill is the amount of Days it took to fill the position
    # 
    # @param job_id id for job
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [PublicApiPlacementResponseList]
    def public_api_get_job_placements(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_placements_with_http_info(job_id, api_key, opts)
      return data
    end

    # Get placements associated with a job  Please Note: TimeToFill is the amount of Days it took to fill the position
    # 
    # @param job_id id for job
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [Array<(PublicApiPlacementResponseList, Fixnum, Hash)>] PublicApiPlacementResponseList data, response status code and response headers
    def public_api_get_job_placements_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_placements ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_placements"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_placements"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/placements".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiPlacementResponseList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_placements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [PublicApiGetTaskResponse]
    def public_api_get_job_task(job_id, task_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_task_with_http_info(job_id, task_id, api_key, opts)
      return data
    end

    # get a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiGetTaskResponse, Fixnum, Hash)>] PublicApiGetTaskResponse data, response status code and response headers
    def public_api_get_job_task_with_http_info(job_id, task_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_job_task ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_get_job_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling JobsApi.public_api_get_job_task"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_job_task"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/tasks/{taskId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'taskId' + '}', task_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetTaskResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_job_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve a list of jobs updated within a certain time frame
    # 
    # @param modified modified within x number of minutes ago
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @option opts [String] :sales_workflow_item_status_id id of sales workflow item status
    # @option opts [String] :workflow_name name of sales workflow item status
    # @return [PublicApiGetJobListResponse]
    def public_api_get_jobs(modified, api_key, opts = {})
      data, _status_code, _headers = public_api_get_jobs_with_http_info(modified, api_key, opts)
      return data
    end

    # retrieve a list of jobs updated within a certain time frame
    # 
    # @param modified modified within x number of minutes ago
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @option opts [String] :sales_workflow_item_status_id id of sales workflow item status
    # @option opts [String] :workflow_name name of sales workflow item status
    # @return [Array<(PublicApiGetJobListResponse, Fixnum, Hash)>] PublicApiGetJobListResponse data, response status code and response headers
    def public_api_get_jobs_with_http_info(modified, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_get_jobs ..."
      end
      # verify the required parameter 'modified' is set
      if @api_client.config.client_side_validation && modified.nil?
        fail ArgumentError, "Missing the required parameter 'modified' when calling JobsApi.public_api_get_jobs"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_get_jobs"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/recent"

      # query parameters
      query_params = {}
      query_params[:'modified'] = modified
      query_params[:'api_key'] = api_key
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'salesWorkflowItemStatusId'] = opts[:'sales_workflow_item_status_id'] if !opts[:'sales_workflow_item_status_id'].nil?
      query_params[:'workflowName'] = opts[:'workflow_name'] if !opts[:'workflow_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_get_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a job
    # 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job(api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_with_http_info(api_key, request, opts)
      return data
    end

    # create a job
    # 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_with_http_info(api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_post_job ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_post_job"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_post_job"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_post_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # add an attachment to a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job_attachment(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_attachment_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # add an attachment to a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_attachment_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_post_job_attachment ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_post_job_attachment"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_post_job_attachment"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_post_job_attachment"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/attachments".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_post_job_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # move a contact into a job for the first time
    # 
    # @param job_id identifier
    # @param contact_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job_contact(job_id, contact_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_contact_with_http_info(job_id, contact_id, api_key, request, opts)
      return data
    end

    # move a contact into a job for the first time
    # 
    # @param job_id identifier
    # @param contact_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_contact_with_http_info(job_id, contact_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_post_job_contact ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_post_job_contact"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling JobsApi.public_api_post_job_contact"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_post_job_contact"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_post_job_contact"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/contacts/{contactId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_post_job_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a note for a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job_note(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_note_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # create a note for a job
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_note_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_post_job_note ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_post_job_note"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_post_job_note"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_post_job_note"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/notes".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_post_job_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a task for a job
    # 
    # @param job_id 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job_task(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_task_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # create a task for a job
    # 
    # @param job_id 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_task_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_post_job_task ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_post_job_task"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_post_job_task"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_post_job_task"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/tasks".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_post_job_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a job
    # Replaces all fields. To partially update a job, first retrieve  it using the GET method, apply changes and submit to the PUT method.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_put_job(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_put_job_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # update a job
    # Replaces all fields. To partially update a job, first retrieve  it using the GET method, apply changes and submit to the PUT method.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_put_job_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_put_job ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_put_job"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_put_job"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_put_job"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_put_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update job stage for a contact
    # 
    # @param job_id job identifier
    # @param contact_id contact identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_put_job_contact_status(job_id, contact_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_put_job_contact_status_with_http_info(job_id, contact_id, api_key, request, opts)
      return data
    end

    # update job stage for a contact
    # 
    # @param job_id job identifier
    # @param contact_id contact identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_put_job_contact_status_with_http_info(job_id, contact_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_put_job_contact_status ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_put_job_contact_status"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling JobsApi.public_api_put_job_contact_status"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_put_job_contact_status"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_put_job_contact_status"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/contacts/{contactId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_put_job_contact_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a note for a job
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_put_job_note(job_id, note_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_put_job_note_with_http_info(job_id, note_id, api_key, request, opts)
      return data
    end

    # update a note for a job
    # 
    # @param job_id identifier
    # @param note_id 
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_put_job_note_with_http_info(job_id, note_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_put_job_note ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_put_job_note"
      end
      # verify the required parameter 'note_id' is set
      if @api_client.config.client_side_validation && note_id.nil?
        fail ArgumentError, "Missing the required parameter 'note_id' when calling JobsApi.public_api_put_job_note"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_put_job_note"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_put_job_note"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/notes/{noteId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'noteId' + '}', note_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_put_job_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_put_job_task(job_id, task_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_put_job_task_with_http_info(job_id, task_id, api_key, request, opts)
      return data
    end

    # update a task for a job
    # 
    # @param job_id 
    # @param task_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_put_job_task_with_http_info(job_id, task_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobsApi.public_api_put_job_task ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobsApi.public_api_put_job_task"
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling JobsApi.public_api_put_job_task"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobsApi.public_api_put_job_task"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobsApi.public_api_put_job_task"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobs/{jobId}/tasks/{taskId}".sub('{' + 'jobId' + '}', job_id.to_s).sub('{' + 'taskId' + '}', task_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#public_api_put_job_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
