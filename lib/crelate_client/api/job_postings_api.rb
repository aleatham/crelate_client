=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CrelateClient
  class JobPostingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # delete a job posting
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_delete_job_postings(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_delete_job_postings_with_http_info(job_id, api_key, opts)
      return data
    end

    # delete a job posting
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_delete_job_postings_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_delete_job_postings ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobPostingsApi.public_api_delete_job_postings"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_delete_job_postings"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_delete_job_postings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve a job posting
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [PublicApiGetJobPostingResponse]
    def public_api_get_job_posting(job_id, api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_posting_with_http_info(job_id, api_key, opts)
      return data
    end

    # retrieve a job posting
    # 
    # @param job_id identifier
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiGetJobPostingResponse, Fixnum, Hash)>] PublicApiGetJobPostingResponse data, response status code and response headers
    def public_api_get_job_posting_with_http_info(job_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_get_job_posting ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobPostingsApi.public_api_get_job_posting"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_get_job_posting"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobPostingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_get_job_posting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve a list of all job postings
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [PublicApiGetJobPostingListResponse]
    def public_api_get_job_postings(api_key, opts = {})
      data, _status_code, _headers = public_api_get_job_postings_with_http_info(api_key, opts)
      return data
    end

    # retrieve a list of all job postings
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [Array<(PublicApiGetJobPostingListResponse, Fixnum, Hash)>] PublicApiGetJobPostingListResponse data, response status code and response headers
    def public_api_get_job_postings_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_get_job_postings ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_get_job_postings"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobPostingListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_get_job_postings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve a list of job postings updated within a certain time frame
    # 
    # @param api_key crelate api key
    # @param modified modified within x number of minutes ago
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [PublicApiGetJobPostingListResponse]
    def public_api_get_recent_job_postings(api_key, modified, opts = {})
      data, _status_code, _headers = public_api_get_recent_job_postings_with_http_info(api_key, modified, opts)
      return data
    end

    # retrieve a list of job postings updated within a certain time frame
    # 
    # @param api_key crelate api key
    # @param modified modified within x number of minutes ago
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip skip number of records, default 0
    # @option opts [Integer] :take retrieve x amount of records, limit 500, default 50
    # @return [Array<(PublicApiGetJobPostingListResponse, Fixnum, Hash)>] PublicApiGetJobPostingListResponse data, response status code and response headers
    def public_api_get_recent_job_postings_with_http_info(api_key, modified, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_get_recent_job_postings ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_get_recent_job_postings"
      end
      # verify the required parameter 'modified' is set
      if @api_client.config.client_side_validation && modified.nil?
        fail ArgumentError, "Missing the required parameter 'modified' when calling JobPostingsApi.public_api_get_recent_job_postings"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/recent"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key
      query_params[:'modified'] = modified
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobPostingListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_get_recent_job_postings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # create a job application
    # The ResumeContent field should contain a Base64 encoded string representing  the contents of the resume, the ResumeFilename should be the original resume  filename including the extension.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [PublicApiIdResponse]
    def public_api_post_job_posting_application(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_post_job_posting_application_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # create a job application
    # The ResumeContent field should contain a Base64 encoded string representing  the contents of the resume, the ResumeFilename should be the original resume  filename including the extension.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiIdResponse, Fixnum, Hash)>] PublicApiIdResponse data, response status code and response headers
    def public_api_post_job_posting_application_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_post_job_posting_application ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobPostingsApi.public_api_post_job_posting_application"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_post_job_posting_application"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobPostingsApi.public_api_post_job_posting_application"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/{jobId}/applications".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiIdResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_post_job_posting_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # search  job postings
    # 
    # @param api_key crelate api key
    # @param query search terms
    # @param [Hash] opts the optional parameters
    # @return [PublicApiGetJobPostingSearchResponse]
    def public_api_put_job_posting(api_key, query, opts = {})
      data, _status_code, _headers = public_api_put_job_posting_with_http_info(api_key, query, opts)
      return data
    end

    # search  job postings
    # 
    # @param api_key crelate api key
    # @param query search terms
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicApiGetJobPostingSearchResponse, Fixnum, Hash)>] PublicApiGetJobPostingSearchResponse data, response status code and response headers
    def public_api_put_job_posting_with_http_info(api_key, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_put_job_posting ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_put_job_posting"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling JobPostingsApi.public_api_put_job_posting"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/search"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key
      query_params[:'query'] = query

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicApiGetJobPostingSearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_put_job_posting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a job posting
    # Replaces all fields. To partially update a job, first retrieve  it using the GET method, apply changes and submit to the PUT method.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def public_api_put_job_posting_0(job_id, api_key, request, opts = {})
      data, _status_code, _headers = public_api_put_job_posting_0_with_http_info(job_id, api_key, request, opts)
      return data
    end

    # update a job posting
    # Replaces all fields. To partially update a job, first retrieve  it using the GET method, apply changes and submit to the PUT method.
    # @param job_id identifier
    # @param api_key crelate api key
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def public_api_put_job_posting_0_with_http_info(job_id, api_key, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: JobPostingsApi.public_api_put_job_posting_0 ..."
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobPostingsApi.public_api_put_job_posting_0"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling JobPostingsApi.public_api_put_job_posting_0"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling JobPostingsApi.public_api_put_job_posting_0"
      end
      # resource path
      local_var_path = "/api/pub/v1/jobPostings/{jobId}".sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobPostingsApi#public_api_put_job_posting_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
