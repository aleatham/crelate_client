=begin
#Crelate API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module CrelateClient
  class DomainApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # returns a list of attachment types
    # 
    # @param api_key crelate api_key
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicApiDocumentType>]
    def public_api_get_document_types(api_key, opts = {})
      data, _status_code, _headers = public_api_get_document_types_with_http_info(api_key, opts)
      return data
    end

    # returns a list of attachment types
    # 
    # @param api_key crelate api_key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicApiDocumentType>, Fixnum, Hash)>] Array<PublicApiDocumentType> data, response status code and response headers
    def public_api_get_document_types_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.public_api_get_document_types ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling DomainApi.public_api_get_document_types"
      end
      # resource path
      local_var_path = "/api/pub/v1/domain/documentTypes"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicApiDocumentType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#public_api_get_document_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get category tags
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicApiTagCategory>]
    def public_api_get_domain_category_tags(api_key, opts = {})
      data, _status_code, _headers = public_api_get_domain_category_tags_with_http_info(api_key, opts)
      return data
    end

    # get category tags
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicApiTagCategory>, Fixnum, Hash)>] Array<PublicApiTagCategory> data, response status code and response headers
    def public_api_get_domain_category_tags_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.public_api_get_domain_category_tags ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling DomainApi.public_api_get_domain_category_tags"
      end
      # resource path
      local_var_path = "/api/pub/v1/domain/tagCategories"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicApiTagCategory>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#public_api_get_domain_category_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get workflow status information
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicApiWorkflowStatus>]
    def public_api_get_domain_workflow_statuses(api_key, opts = {})
      data, _status_code, _headers = public_api_get_domain_workflow_statuses_with_http_info(api_key, opts)
      return data
    end

    # get workflow status information
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicApiWorkflowStatus>, Fixnum, Hash)>] Array<PublicApiWorkflowStatus> data, response status code and response headers
    def public_api_get_domain_workflow_statuses_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.public_api_get_domain_workflow_statuses ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling DomainApi.public_api_get_domain_workflow_statuses"
      end
      # resource path
      local_var_path = "/api/pub/v1/domain/workflowStatuses"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicApiWorkflowStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#public_api_get_domain_workflow_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get workflow types
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<PublicApiWorkflowType>]
    def public_api_get_domain_workflow_types(api_key, opts = {})
      data, _status_code, _headers = public_api_get_domain_workflow_types_with_http_info(api_key, opts)
      return data
    end

    # get workflow types
    # 
    # @param api_key crelate api key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PublicApiWorkflowType>, Fixnum, Hash)>] Array<PublicApiWorkflowType> data, response status code and response headers
    def public_api_get_domain_workflow_types_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DomainApi.public_api_get_domain_workflow_types ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling DomainApi.public_api_get_domain_workflow_types"
      end
      # resource path
      local_var_path = "/api/pub/v1/domain/workflowTypes"

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PublicApiWorkflowType>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DomainApi#public_api_get_domain_workflow_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
